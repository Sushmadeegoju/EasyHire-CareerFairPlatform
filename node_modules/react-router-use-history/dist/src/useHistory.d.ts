/// <reference types="react" />
import * as ReactRouterDOM from 'react-router-dom';
import { type History as RemixHistory } from '@remix-run/router';
import { type BrowserRouterHistoryState } from './BrowserRouter';
/**
 * data browser router history hooks
 */
export declare const useBrowserRouterHistory: () => History;
type ExtractContextValueType<C = any> = C extends React.Context<infer U> ? U : never;
type DataRouterContextObject = ExtractContextValueType<typeof ReactRouterDOM.UNSAFE_DataRouterContext>;
type Listen = NonNullable<DataRouterContextObject>['router']['subscribe'];
/**
 * data browser router state
 * @example history.listen((state: DataRouterHistoryState) => {})
 */
export type DataRouterHistoryState = Parameters<Parameters<Listen>[0]>[0];
/**
 * router state when history change
 * @example history.listen((state: RouterState) => {})
 */
export type RouterState = Partial<DataRouterHistoryState> & Partial<BrowserRouterHistoryState> & Pick<BrowserRouterHistoryState, 'location'>;
/**
 * history listener function type
 */
export type Listner = (listener: (state: RouterState) => void) => () => void;
type HistoryListen = {
    listen: Listner;
};
/**
 * compatible with `<BrowserRouter>` and `createBrowserRouter` history
 */
export type History = Omit<RemixHistory, 'listen'> & HistoryListen;
export declare const useHistory: () => History;
export {};
